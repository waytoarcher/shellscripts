#!/usr/bin/bash
#v1.0 by sandylaw <waytoarcher@gmail.com>
set -e
ARCH=$(uname -m)
TUSER="$USER"
# build
function get_latest_release() {
    curl --silent "https://api.github.com/repos/$1/releases/latest" | grep -Po '"tag_name":[ ]*"\K.*?(?=")'
}
extract()  {
    if [ -f "$1" ]; then
        case "$1" in
            *.tar.bz2) tar xvjf "$1" ;;
            *.tar.gz) tar xvzf "$1" ;;
            *.tar.xz) tar xvJf "$1" ;;
            *.bz2) bunzip2 "$1"     ;;
            *.rar) unrar x "$1"     ;;
            *.gz)  gunzip "$1"      ;;
            *.tar) tar xvf "$1"     ;;
            *.tbz2) tar xvjf "$1"   ;;
            *.tgz) tar xvzf "$1"    ;;
            *.zip) unzip "$1"       ;;
            *.Z)   uncompress "$1"  ;;
            *.7z)  7z x "$1"        ;;
            *.xz)  unxz "$1"        ;;
            *.exe) cabextract "$1"  ;;
            *)     echo "\'$1': unrecognized file compression" ;;
        esac
    else
        echo "\'$1' is not a valid file"
    fi
}
function deepin_apt_source() {
    # shellcheck disable=SC1091
    source '/etc/os-release' || exit
    ID=$(echo "${ID}" | tr '[:upper:]' '[:lower:]')
    if [ "${ID}" == deepin ]; then
        echo "## Generated by deepin-installer
deb http://pools.uniontech.com/deepin apricot main contrib non-free
deb-src http://pools.uniontech.com/deepin apricot main contrib non-free
" | sudo tee /etc/apt/sources.list
    elif [ "${ID}" == uos ]; then
        echo "## Generated by deepin-installer
deb http://pools.uniontech.com/desktop-professional/ eagle main contrib non-free
deb-src http://pools.uniontech.com/desktop-professional/ eagle main contrib non-free
" | sudo tee /etc/apt/sources.list
    else
        echo "please check your os: deepin or uos?"
        exit 1
    fi
    sudo apt update
}
function install_common_soft() {
    curl -fsSL https://mirrors.aliyun.com/docker-ce/linux/debian/gpg | sudo gpg --dearmor -o /usr/share/keyrings/docker-archive-keyring.gpg
    echo \
  "deb [arch=amd64 signed-by=/usr/share/keyrings/docker-archive-keyring.gpg] https://mirrors.aliyun.com/docker-ce/linux/debian \
  buster stable" | sudo tee /etc/apt/sources.list.d/docker.list > /dev/null

    sudo apt update && sudo apt upgrade -y
    sudo apt install -y git git-review tree unzip build-essential curl wget aria2 firefox-esr keepassxc python3-pip telegram-desktop mpv gnome-terminal mousepad fakeroot manpages-zh debhelper htop
    sudo apt install -y devscripts pbuilder qt5-default qt5-qmake cmake neofetch xclip golang privoxy proxychains jq screen ctags
    sudo apt install -y docker-ce docker-ce-cli containerd.io
    sudo systemctl enable docker --now
    mkdir -p "$HOME"/.config/pip
    pip3 config set global.index-url https://mirrors.aliyun.com/pypi/simple/
    cat << EOF | tee "$HOME"/.gitcommit_template
# commit type :fix（问题修复）、feat（功能开发）、style(风格修改)、refactor(重构)、docs（文档）、chore（其他)、test(测试) + 简单描述. 默认fix,根据情况修改
fix:

# Describe you bug/feature,or other things
Description:

#
Log:

# 关联pms上的bug号，提交后，则会自动在pms对应bug信息页面添加备注，关联
# 本次提交。若本次提交为修复bug相关，则请取消注释
#Bug:
# 尚不清楚干啥的
#Issue:
# 关联pms上的任务号，提交后，则会自动在pms对应任务信息页面添加备注，关
# 联本次提交。若本次提交为任务相关，则请取消注释
#Task:
EOF
    git config --global commit.template ~/.gitcommit_template
    git config --global gitreview.remote origin
}
function install_pycharm() {
    latest_version=$(wget -O - https://data.services.jetbrains.com/products/releases\?code\=PCP\&latest\=true\&type\=release 2> /dev/null | jq -r '.PCP[]|.version')

    cd /tmp || exit
    rm -rf pycharm-community-"$latest_version"* || true
    wget https://download.jetbrains.com/python/pycharm-community-"$latest_version".tar.gz
    sleep 3
    tar -xf pycharm-community-"$latest_version".tar.gz || exit
    echo copy to /opt/
    sudo cp -rf pycharm-community-"$latest_version" /opt/
    echo remove download files
    rm -rf pycharm-community-"$latest_version"* || true
    cd /opt/pycharm-community-"$latest_version"/bin || exit
    sleep 3
    echo setup pycharm
    sudo sed -r '/^SED/aexport _JAVA_AWT_WM_NONREPARENTING=1' ./pycharm.sh
    cat << EOF | sudo tee /etc/sysctl.d/notify.conf
fs.inotify.max_user_watches = 524288
EOF

    cat << EOF | sudo tee /usr/bin/pycharm
#! /usr/bin/bash
nohup /usr/lib/gnome-settings-daemon/gsd-xsettings > /dev/null 2>&1 &
export _JAVA_AWT_WM_NONREPARENTING=1
/opt/pycharm-community-"$latest_version"/bin/pycharm.sh
EOF

    sudo chmod a+x /usr/bin/pycharm
    sudo sysctl -p --system
    ./pycharm.sh
}
function uninstall_pycharm() {
    latest_version=$(wget -O - https://data.services.jetbrains.com/products/releases\?code\=PCP\&latest\=true\&type\=release 2> /dev/null | jq -r '.PCP[]|.version')
    rm -rf "$HOME"/.config/JetBrains
    rm -rf "$HOME"/.java
    rm -rf "$HOME"/.jetbrains
    sudo rm -rf /opt/pycharm-community-"$latest_version"
    sudo rm -rf /usr/local/bin/charm
}
function pycharm() {
    echo "
1. install pycharm
2. uninstall pycharm
3. exit
"
    read -r ipx
    case $ipx in
        1)
            install_pycharm
            echo "pycharm plugins: shell script, save, ansible and so on."
            ;;
        2)
            uninstall_pycharm
            ;;
        3)
            exit
            ;;
        *) ;;
    esac
}
function install_vscode() {
    wget -q https://packages.microsoft.com/keys/microsoft.asc -O- | sudo apt-key add -
    echo "deb [arch=amd64] https://packages.microsoft.com/repos/vscode stable main" | sudo tee /etc/apt/sources.list.d/vscode.list
    sudo apt update
    sudo apt install code -y
}
# kvm
function install_kvm_less() {
    TUSER="$USER"
    sudo apt install -y qemu-kvm libvirt-clients libvirt-daemon-system bridge-utils virt-manager
    sudo usermod -aG libvirt "$TUSER"
    sudo usermod -aG kvm "$TUSER"
    sudo virsh net-autostart default
    sudo virsh net-start default
}
function install_kvm_more() {
    TUSER="$USER"
    echo "Virtualization host installation"
    sudo apt install -y libvirt-dev virt-viewer uuid-runtime
    sudo apt install -y pkg-config genisoimage netcat
    sudo apt install -y kpartx qemu-kvm libvirt-daemon-system libvirt-clients bridge-utils virtinst virt-manager qemu-system-arm qemu-utils qemu-user-static
    sudo apt install -y qemu-efi qemu-efi-aarch64 qemu-efi-arm qemu python-libvirt uml-utilities qemu-system gcc-arm-linux-gnueabihf libc6-dev-armhf-cross
    sudo apt install -y virt-top libguestfs-tools libosinfo-bin libvirt-daemon
    sudo usermod -aG libvirt "$TUSER"
    sudo usermod -aG kvm "$TUSER"
    sudo systemctl restart libvirtd.service
}
# dwm
function install_dwm() {
    wget -N --no-check-certificate -q -O install.sh "https://raw.githubusercontent.com/sandylaw/dwm/master/install.sh" && chmod +x install.sh && bash install.sh
}
#install v2ray
function install_v2ray() {
    echo "INFO Installing v2ray"
    case $ARCH in
        x86_64)
            ARCH=64
            ;;
        aarch64)
            ARCH=arm64-v8a
            ;;
        mips64)
            ARCH=mips64el
            ;;
        *) ;;
    esac
    while true; do
        v2ray_version=$(get_latest_release "v2ray/v2ray-core")
        if [[ -n "$v2ray_version" ]]; then
            break
        fi
    done
    echo "$v2ray_version"
    mkdir -p v2ray
    wget -O v2ray.zip https://github.com/v2ray/v2ray-core/releases/download/"$v2ray_version"/v2ray-linux-"$ARCH".zip && unzip v2ray.zip -d v2ray/
    cp config_v2ray.json v2ray/config.json
    sudo cp v2ray.service /usr/lib/systemd/system/
    tree v2ray/
    pushd v2ray/ > /dev/null || exit
    sudo rm -rf /etc/v2ray
    sudo mkdir -p /etc/v2ray
    sudo mv config.json /etc/v2ray/
    rm -rf systemd
    rm -rf systemv
    sudo rm -rf /usr/bin/v2ray/
    sudo mkdir -p /usr/bin/v2ray/
    ls /usr/bin/v2ray/
    echo "copy files to /usr/bin/v2ray/"
    sudo rsync -vra ./* /usr/bin/v2ray/
    sudo systemctl enable v2ray
    sudo systemctl start v2ray
    popd > /dev/null || exit
    rm -rf v2ray*
}
#install wexin.work
function install_wexin_work() {
    sudo apt install -y com.qq.weixin.work.deepin gnome-settings-daemon
    cat << EOF | sudo tee /usr/bin/wxwork
#! /usr/bin/bash
nohup /usr/lib/gnome-settings-daemon/gsd-xsettings > /dev/null 2>&1 &
/opt/apps/com.qq.weixin.work.deepin/files/run.sh
EOF
    sudo chmod +x /usr/bin/wxwork
    sudo sed -ri '/^WINE_CMD=/cWINE_CMD="LC_ALL=zh_CN.UTF-8 deepin-wine"' /opt/apps/com.qq.weixin.work.deepin/files/run.sh
}
# pcmanfm
function install_pcmanfm() {
    sudo apt install -y pcmanfm exo-utils libexo-1-0
    if [ -f /usr/share/dbus-1/services/com.deepin.filemanager.filedialog.service ]; then
        sudo sed -ri 's/^[ \t*#*]Exec/#&/' /usr/share/dbus-1/services/com.deepin.filemanager.filedialog.service
    fi
}
function install_vim() {
    mkdir -p "$HOME"/.vim/bundle
    mkdir -p "$HOME"/.vim/.backup
    mkdir -p "$HOME"/.vim/.undo
    mkdir -p "$HOME"/.vim/.swap
    sudo apt install libncurses5-dev cmake
    git clone https://github.com/VundleVim/Vundle.vim.git "$HOME"/.vim/bundle/Vundle.vim || exit
    cp ./vimrc "$HOME"/.vimrc || exit
    # YouCompleteMe 是基于 Vim 的 omnifunc 机制来实现自动补全功能
    if [ -d "$HOME"/.vim/bundle/YouCompleteMe ]; then
        :
    else
        git clone https://github.com/Valloric/YouCompleteMe.git "$HOME"/.vim/bundle/YouCompleteMe
        cd "$HOME"/.vim/bundle/YouCompleteMe || exit
        git submodule update --init --recursive
        #./install.sh --clang-completer --system-libclang
        python3 install.py --clangd-completer
    fi
    vim +PluginInstall +qall
}
function install_check_and_format() {
    # python3
    if [ -f /usr/bin/python ]; then
        sudo rm -f /usr/bin/python
    fi
    if [ -f /usr/bin/python3 ] && [ ! -f /usr/bin/python ]; then
        sudo ln -s /usr/bin/python3 /usr/bin/python
    fi
    #black ansible pylint
    pip3 config set global.index-url https://mirrors.aliyun.com/pypi/simple/
    pip3 install -i https://mirrors.ustc.edu.cn/pypi/web/simple pip -U
    pip3 install black pylint ansible lastversion
    #install_shell_check
    ARCH=$(uname -m)
    while [ -z "$shellcheck_version" ]; do
        shellcheck_version=$(get_latest_release "koalaman/shellcheck")
    done
    wget -O - https://github.com/koalaman/shellcheck/releases/download/"$shellcheck_version"/shellcheck-"$shellcheck_version".linux."$ARCH".tar.xz | tar -xJf -
    chmod +x shellcheck-"$shellcheck_version"/shellcheck || true
    sudo mv shellcheck-"$shellcheck_version"/shellcheck /usr/bin/ || true
    rm -rf shellcheck-"$shellcheck_version"
    # shfmt
    case $ARCH in
        x86_64)
            arch=amd64
            ;;
        aarch64)
            arch=arm
            ;;
        mips64)
            arch=mips64el
            ;;
        *) ;;
    esac
    while [ -z "$shfmt_version" ]; do
        shfmt_version=$(get_latest_release "mvdan/sh")
    done
    wget https://github.com/mvdan/sh/releases/download/"$shfmt_version"/shfmt_"$shfmt_version"_linux_"$arch"
    sleep 1
    chmod +x shfmt_"$shfmt_version"_linux_"$arch" || exit
    sudo mv shfmt_"$shfmt_version"_linux_"$arch" /usr/bin/shfmt || exit
}
# proxy
function install_proxytool() {
    sudo apt install -y proxychains privoxy
}
function install_svn() {
    sudo apt install rabbitvcs-cli rabbitvcs-core rabbitvcs-gedit rabbitvcs-nautilus
}
# oh my zsh
function install_oh_my_zsh() {
    set -x
    exec > >(tee -i /tmp/install_zsh.log)
    exec 2>&1
    sudo apt update || exit
    sudo apt install -y zsh fonts-powerline curl git || exit
    cd "$HOME" || exit
    rm -rf "$HOME"/.local/share/fonts
    mkdir -p "$HOME"/.local/share/fonts
    cd "$HOME"/.local/share/fonts || exit
    while true; do
        wget https://github.com/romkatv/powerlevel10k-media/raw/master/MesloLGS%20NF%20Regular.ttf || true
        wget https://github.com/romkatv/powerlevel10k-media/raw/master/MesloLGS%20NF%20Bold.ttf || true
        wget https://github.com/romkatv/powerlevel10k-media/raw/master/MesloLGS%20NF%20Italic.ttf || true
        wget https://github.com/romkatv/powerlevel10k-media/raw/master/MesloLGS%20NF%20Bold%20Italic.ttf || true
        fontsnu=$(find "$HOME"/.local/share/fonts/ -name "MesloLGS*" | wc -l)
        if [ "$fontsnu" == 4 ]; then
            break
        fi
    done
    fc-cache -v
    cd "$HOME" || exit
    echo "INFO Now start install zsh:"
    echo "When zsh have been installed,pleast input exit , back to continue run……"
    echo "When zsh have been installed,pleast input exit , back to continue run……"
    sleep 5
    i=0
    while true; do
        i=$((i + 1))
        wget -O - https://raw.githubusercontent.com/robbyrussell/oh-my-zsh/master/tools/install.sh | bash - || true
        if [ -f "$HOME"/.oh-my-zsh/oh-my-zsh.sh ]; then
            break
        fi
        if [ $i -gt 30 ]; then
            echo "Check the internet."
            exit 1
        fi
    done
    cp "$HOME"/.oh-my-zsh/templates/zshrc.zsh-template "$HOME"/.zshrc
    while true; do
        if git clone https://github.com/zsh-users/zsh-autosuggestions "$HOME"/.oh-my-zsh/custom/plugins/zsh-autosuggestions; then
            break
        fi
    done
    while true; do
        if git clone https://github.com/zsh-users/zsh-syntax-highlighting.git "$HOME"/.oh-my-zsh/custom/plugins/zsh-syntax-highlighting; then
            break
        fi
    done
    while true; do
        if git clone https://github.com/sukkaw/zsh-proxy.git "$HOME"/.oh-my-zsh/custom/plugins/zsh-proxy; then
            break
        fi
    done
    while true; do
        if git clone --depth=1 https://github.com/romkatv/powerlevel10k.git "$HOME"/.oh-my-zsh/custom/themes/powerlevel10k; then
            break
        fi
    done
    sed -ri '/^plugins/c plugins=(git zsh-proxy colored-man-pages zsh-autosuggestions zsh-syntax-highlighting)' "$HOME"/.zshrc
    sed -ri '/^#[ *]HIST_STAMPS/c HIST_STAMPS="yyyy-mm-dd"' "$HOME"/.zshrc
    sed -ri '/^ZSH_THEME/c ZSH_THEME="powerlevel10k/powerlevel10k"' "$HOME"/.zshrc
    sed -ri "/^POWERLEVEL9K_DISABLE_CONFIGURATION_WIZARD=true/d" "$HOME"/.zshrc
    sed -ri "\$aPOWERLEVEL9K_DISABLE_CONFIGURATION_WIZARD=true" "$HOME"/.zshrc
    echo "change default sh to zsh:"
    chsh -s "$(which zsh)"
    echo "$SHELL"
}
function install_oh_my_bash() {
    while true; do
        bash -c "$(wget https://raw.githubusercontent.com/ohmybash/oh-my-bash/master/tools/install.sh -O -)" || true
        if [ -f "$HOME"/.oh-my-bash/oh-my-bash.sh ]; then
            sed -ri '/^OSH_THEME/cOSH_THEME="powerline"' "$HOME"/.bashrc
            break
        fi
    done
}
install_chrome(){
    wget -q -O - https://dl.google.com/linux/linux_signing_key.pub | sudo apt-key add -
    cat <<EOF | tee /etc/apt/sources.list.d/google-chrome.list
deb http://dl.google.com/linux/chrome/deb stable InRelease
EOF
    sudo apt update
    sudo apt install google-chrome-stable
}
while true; do
    echo "Install and manager kvm ,Please select:"
    echo " 1: set up source list    Must do it first"
    echo " 2: install pycharm       Version:2020.2.3"
    echo " 3: install vscode "
    echo " 4: install vim           With plugins"
    echo " 5: install kvm           With cross support(arm on x86)"
    echo " The system has           Installed kvm which supports x86"
    echo " 6: install dwm           Dwm is a dynamic window manager for X"
    echo " 7: install pcmanfm "
    echo " 8: install oh my bash"
    echo " 9: install oh my zsh"
    echo " 10: install weixin for work"
    echo " 11: install kvm          with only x86"
    echo " 12: install common soft"
    echo " 13: install check&format shellcheck shfmt black ansible-lint"
    echo " 14: install proxy tools"
    echo " 0: exit"
    echo ""
    read -r -p "Please input the choice:" idx
    if [[ "$idx" -ge 1 ]] || [[ "$idx" -le 6 ]]; then
        :
    else
        echo "Please check the your choice."
    fi
    #  echo "no choice,exit"
    if [[ '1' = "$idx" ]]; then
        eval "deepin_apt_source"
    elif [[ '2' = "$idx" ]]; then
        eval "pycharm"
    elif [[ '3' = "$idx" ]]; then
        eval "install_vscode"
    elif [[ '4' = "$idx" ]]; then
        eval "install_vim"
    elif [[ '5' = "$idx" ]]; then
        eval "install_kvm_more"
    elif [[ '6' = "$idx" ]]; then
        eval "install_dwm"
    elif [[ '7' = "$idx" ]]; then
        eval "install_pcmanfm"
    elif [[ '8' = "$idx" ]]; then
        eval "install_oh_my_bash"
    elif [[ '9' = "$idx" ]]; then
        eval "install_oh_my_zsh"
    elif [[ '10' = "$idx" ]]; then
        eval "install_wexin_work"
    elif [[ '11' = "$idx" ]]; then
        eval "install_kvm_less"
    elif [[ '12' = "$idx" ]]; then
        eval "install_common_soft"
    elif [[ '13' = "$idx" ]]; then
        eval "install_check_and_format"
    elif [[ '13' = "$idx" ]]; then
        eval "install_v2ray"
    elif [[ '14' = "$idx" ]]; then
        eval "install_proxytool"
    elif [[ '0' = "$idx" ]]; then
        eval "exit"
    else
        echo "no choice,exit!"
        eval "exit"
    fi
done
