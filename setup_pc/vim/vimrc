" 不兼容vi
set nocompatible              " be iMproved, required
" 语法高亮
syntax on
"在底部显示，当前处于命令模式还是插入模式。
set showmode
" 命令模式下，在底部显示，当前键入的指令
set showcmd
" 显示行号
set number
" 显示光标所在的当前行的行号，其他行都为相对于该行的相对行号。
set relativenumber
" 光标所在的当前行高亮
set cursorline
" 是否显示状态栏。0 表示不显示，1 表示只在多窗口时显示，2 表示显示。
set laststatus=2
" 在状态栏显示光标的当前位置（位于哪一行哪一列）
set  ruler
" UTF-8
set encoding=utf-8
" 256色
set t_Co=256
"打开文件类型检测功能
filetype on
"不同文件类型采用不同缩进
filetype indent on

" 自动缩进
set autoindent
set tabstop=4       " The width of a TAB is set to 4.
                    " Still it is a \t. It is just that
                    " Vim will interpret it to be having
                    " a width of 4.

set shiftwidth=4    " Indents will have a width of 4

set softtabstop=4   " Sets the number of columns for a TAB

set expandtab       " Expand TABs to spaces

" add yaml stuffs
au! BufNewFile,BufReadPost *.{yaml,yml} set filetype=yaml foldmethod=indent
autocmd FileType yaml setlocal ts=2 sts=2 sw=2 expandtab

:nnoremap <F2> :setl noai nocin nosi inde=<CR>
" F5 to run sh/python3
map <F5> :call CompileRunGcc()<CR>
func! CompileRunGcc()
    exec "w"
    if &filetype == 'sh'
        :!time bash %
    elseif &filetype == 'python'
        exec "!time python3.6 %"
    endif
endfunc

" 光标遇到圆括号、方括号、大括号时，自动高亮对应的另一个圆括号、方括号和大括号。
set showmatch
"搜索时，高亮显示匹配结果
set hlsearch
" 输入搜索模式时，每输入一个字符，就自动跳到第一个匹配的结果。
set incsearch

" 搜索时忽略大小写。
set ignorecase
set smartcase

" 打开英语单词的拼写检查
set spell spelllang=en_us

" 保留撤销历史
set noswapfile
set nobackup
set writebackup " Enabled!
set undofile
set history=1000
set backupdir=~/.vim/.backup//  
set directory=~/.vim/.swp//
set undodir=~/.vim/.undo//

" 自动切换工作目录
set autochdir
" 打开文件监视。如果在编辑过程中文件发生外部改变（比如被别的编辑器编辑了），就会发出提示。
set autoread
set noreadonly

" 如果行尾有多余的空格（包括 Tab 键），该配置将让这些空格显示成可见的小方块。
set listchars=tab:»■,trail:■
set list

" 命令模式下，底部操作指令按下 Tab 键自动补全。
set wildmenu
set wildmode=longest:list,full
" set the runtime path to include Vundle and initialize
set rtp+=$HOME/.vim/bundle/Vundle.vim
call vundle#begin()
" alternatively, pass a path where Vundle should install plugins
"call vundle#begin('$HOME/some/path/here')

" let Vundle manage Vundle, required
Plugin 'VundleVim/Vundle.vim'

" 自动生成tags插件vim-gutentags
Plugin 'ludovicchabant/vim-gutentags'
" 撤销undo
Plugin 'mbbill/undotree'
Plugin 'itchyny/lightline.vim'
let g:lightline = {
      \ 'colorscheme': 'powerline',
      \ 'active': {
      \   'left': [ [ 'mode', 'paste' ],
      \             [ 'readonly', 'filename', 'modified', 'helloworld' ] ]
      \ },
      \ 'component': {
      \   'helloworld': 'I am writing shit...'
      \ },
      \ }

" NERDTree是一款用来在Vim界面显示树形目录的文件管理器插件
Plugin 'scrooloose/nerdtree'
autocmd StdinReadPre * let s:std_in=1
autocmd VimEnter * if argc() == 1 && isdirectory(argv()[0]) && !exists("s:std_in") | exe 'NERDTree' argv()[0] | wincmd p | ene | exe 'cd '.argv()[0] | endif
let g:NERDTreeDirArrowExpandable = '▸'
let g:NERDTreeDirArrowCollapsible = '▾'
" fzf (FuZzy Finder)是一个使用go语言开发的模糊搜索工具，可以在bash、tmux等环境使用，也可以作为一种Vim插件来增强Vim的功能。
Plugin 'junegunn/fzf',
Plugin 'junegunn/fzf.vim',

" vimwiki + Zettelkasten

Plugin 'vimwiki/vimwiki',
Plugin 'michal-h21/vim-zettel',
Plugin 'pearofducks/ansible-vim'
" 代码折叠
Plugin 'tmhedberg/SimpylFold'
set foldmethod=indent
" python go
let mapleader=","
Plugin 'klen/python-mode'
let g:ycm_python_binary_path = 'python'
nnoremap <leader>gl :YcmCompleter GoToDeclaration<CR>
nnoremap <leader>gf :YcmCompleter GoToDefinition<CR>
nnoremap <leader>gg :YcmCompleter GoToDefinitionElseDeclaration<CR>
Plugin 'fatih/vim-go'
" ALE (Asynchronous Lint Engine) is a plugin providing linting (syntax checking and semantic errors) 

Plugin 'dense-analysis/ale'
" ale settings
" let g:ale_set_loclist = 0
let g:ale_set_quickfix = 1
let g:ale_open_list = 1
" python checker
let g:ale_fixers = {
\   'javascript': ['standard'],
\   'python': ['pylint'],
\   'bash': ['shfmt']
\}
" shellcheck
let g:ale_linters = {
\   'csh': ['shell'],
\   'bash': ['shell'],
\   'rust': ['cargo'],
\   'text': [],
\   'zsh': ['shell'],
\}

"使用配色方案
colo desert

" The following are examples of different formats supported.
" Keep Plugin commands between vundle#begin/end.
" plugin on GitHub repo
Plugin 'tpope/vim-fugitive'
" plugin from http://vim-scripts.org/vim/scripts.html
" Plugin 'L9'
" Git plugin not hosted on GitHub
Plugin 'git://git.wincent.com/command-t.git'
" git repos on your local machine (i.e. when working on your own plugin)
"Plugin 'file:///home/gmarik/path/to/plugin'
" The sparkup vim script is in a subdirectory of this repo called vim.
" Pass the path to set the runtimepath properly.
Plugin 'rstacruz/sparkup', {'rtp': 'vim/'}
" Install L9 and avoid a Naming conflict if you've already installed a
" different version somewhere else.
" Plugin 'ascenator/L9', {'name': 'newL9'}

" All of your Plugins must be added before the following line
Plugin 'Valloric/YouCompleteMe', { 'commit':'d98f896' }
" git submodule update --init --recursive && ./install.py --clangd-completer
"
"ldikss/vim-translator'
let g:translator_target_lang = "zh"
let g:translator_proxy_url = 'socks5://192.168.122.17:1080'
""" Configuration example
" Echo translation in the cmdline
 nmap <silent> <Leader>t <Plug>Translate
 vmap <silent> <Leader>t <Plug>TranslateV
" """ Display translation in a window
 nmap <silent> <Leader>w <Plug>TranslateW
 vmap <silent> <Leader>w <Plug>TranslateWV
" " Replace the text with translation
 nmap <silent> <Leader>r <Plug>TranslateR
 vmap <silent> <Leader>r <Plug>TranslateRV
" " Translate the text in clipboard
 nmap <silent> <Leader>x <Plug>TranslateX
call vundle#end()            " required
filetype plugin indent on    " required
" To ignore plugin indent changes, instead use:
"filetype plugin on
"
" Brief help
" :PluginList       - lists configured plugins
" :PluginInstall    - installs plugins; append `!` to update or just :PluginUpdate
" :PluginSearch foo - searches for foo; append `!` to refresh local cache
" :PluginClean      - confirms removal of unused plugins; append `!` to auto-approve removal
"
" see :h vundle for more details or wiki for FAQ
" Put your non-Plugin stuff after this line

" gutentags搜索工程目录的标志，碰到这些文件/目录名就停止向上一级目录递归 "
let g:gutentags_project_root = ['.root', '.svn', '.git', '.project']

" 所生成的数据文件的名称 "
let g:gutentags_ctags_tagfile = '.tags'

" 将自动生成的 tags 文件全部放入 $HOME/.cache/tags 目录中，避免污染工程目录 "
let s:vim_tags = expand('$HOME/.cache/tags')
let g:gutentags_cache_dir = s:vim_tags
" 检测 $HOME/.cache/tags 不存在就新建 "
if !isdirectory(s:vim_tags)
   silent! call mkdir(s:vim_tags, 'p')
endif

" 配置 ctags 的参数 "
let g:gutentags_ctags_extra_args = ['--fields=+niazS', '--extra=+q']
let g:gutentags_ctags_extra_args += ['--c++-kinds=+pxI']
let g:gutentags_ctags_extra_args += ['--c-kinds=+px']

Plugin 'tomasiser/vim-code-dark'
colorscheme codedark

" Track the engine.
Plugin 'SirVer/ultisnips'

" Snippets are separated from the engine. Add this if you want them:
Plugin 'honza/vim-snippets'

" Trigger configuration. You need to change this to something other than <tab> if you use one of the following:
" - https://github.com/Valloric/YouCompleteMe
" - https://github.com/nvim-lua/completion-nvim

" If you want :UltiSnipsEdit to split your window.
let g:UltiSnipsEditSplit="vertical"

" Trigger configuration. Do not use <tab> if you use
" https://github.com/Valloric/YouCompleteMe.
" UltiSnips 的 tab 键与 YCM 冲突，重新设定
let g:UltiSnipsExpandTrigger="<leader><tab>"
let g:UltiSnipsJumpForwardTrigger="<leader><tab>"
let g:UltiSnipsJumpBackwardTrigger="<leader><s-tab>"

" shortcut to go to next position
let g:UltiSnipsJumpForwardTrigger='<c-j>'

" shortcut to go to previous position
let g:UltiSnipsJumpBackwardTrigger='<c-k>'
let g:UltiSnipsSnippetDirectories=["UltiSnips",  "myCoolSnippets"]
